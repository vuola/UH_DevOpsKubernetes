name: Release application

on:
  push:

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: dwk-cluster
  GKE_ZONE: europe-north1-b
  IMAGE: dok-project

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: GKEtestbed

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.GKE_PROJECT }}
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          export_default_credentials: true

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker
      # Get the GKE credentials so we can deploy to the cluster
      - run: |-
          gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"
      # Build the Docker images
      - name: Build backend
        run: |-
          docker build \
            --tag "gcr.io/$PROJECT_ID/$IMAGE/backend:${GITHUB_REF#refs/heads/}-$GITHUB_SHA" \
            ./backend
      - name: Build frontend
        run: |-
          docker build \
            --tag "gcr.io/$PROJECT_ID/$IMAGE/frontend:${GITHUB_REF#refs/heads/}-$GITHUB_SHA" \
            ./frontend
      - name: Build cronjob
        run: |-
          docker build \
            --tag "gcr.io/$PROJECT_ID/$IMAGE/cronjob:${GITHUB_REF#refs/heads/}-$GITHUB_SHA" \
            ./cronjob
      # Push the Docker image to Google Container Registry
      - name: Publish backend
        run: |-
          docker push "gcr.io/$PROJECT_ID/$IMAGE/backend:${GITHUB_REF#refs/heads/}-$GITHUB_SHA"
      - name: Publish frontend
        run: |-
          docker push "gcr.io/$PROJECT_ID/$IMAGE/frontend:${GITHUB_REF#refs/heads/}-$GITHUB_SHA"
      - name: Publish cronjob
        run: |-
          docker push "gcr.io/$PROJECT_ID/$IMAGE/cronjob:${GITHUB_REF#refs/heads/}-$GITHUB_SHA"
      - name: Pull mariadb from docker
        run: |-
          docker pull mariadb:latest
          docker tag mariadb:latest "gcr.io/$PROJECT_ID/$IMAGE/mariadb:${GITHUB_REF#refs/heads/}-$GITHUB_SHA"
      - name: Publish mariadb to G
        run: |-
          docker push "gcr.io/$PROJECT_ID/$IMAGE/mariadb:${GITHUB_REF#refs/heads/}-$GITHUB_SHA"
      - name: Pull adminer from docker
        run: |-
          docker pull adminer:latest
          docker tag adminer:latest "gcr.io/$PROJECT_ID/$IMAGE/adminer:${GITHUB_REF#refs/heads/}-$GITHUB_SHA"
      - name: Publish adminer to G
        run: |-
          docker push "gcr.io/$PROJECT_ID/$IMAGE/adminer:${GITHUB_REF#refs/heads/}-$GITHUB_SHA"

      # Set up kustomize
      - name: Set up Kustomize
        uses: imranismail/setup-kustomize@v1

      # Deploy the Docker images to the GKE cluster
      - name: Deploy
        run: |-
          kustomize edit set image gcr.io/PROJECT_ID/IMAGE/BACKEND=gcr.io/$PROJECT_ID/$IMAGE/backend:${GITHUB_REF#refs/heads/}-$GITHUB_SHA
          kustomize edit set image gcr.io/PROJECT_ID/IMAGE/FRONTEND=gcr.io/$PROJECT_ID/$IMAGE/frontend:${GITHUB_REF#refs/heads/}-$GITHUB_SHA
          kustomize edit set image gcr.io/PROJECT_ID/IMAGE/MARIADB=gcr.io/$PROJECT_ID/$IMAGE/mariadb:${GITHUB_REF#refs/heads/}-$GITHUB_SHA
          kustomize edit set image gcr.io/PROJECT_ID/IMAGE/CRONJOB=gcr.io/$PROJECT_ID/$IMAGE/cronjob:${GITHUB_REF#refs/heads/}-$GITHUB_SHA
          kustomize edit set image gcr.io/PROJECT_ID/IMAGE/ADMINER=gcr.io/$PROJECT_ID/$IMAGE/adminer:${GITHUB_REF#refs/heads/}-$GITHUB_SHA
          kustomize build . | kubectl apply -f -
          kubectl rollout status deployment
          kubectl get services -o wide